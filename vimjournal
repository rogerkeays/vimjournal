#!/usr/bin/racket 
#lang jamaica sweet-exp racket
;; vim: syntax=scheme

require fluent racket/list

;;
;; main
;;
module+ main
  (parse-journal (current-input-port) (e : e » car » substring 0 8 » string>=? "20210217")) » sort-journal » print-journal
  ;;(parse-journal) » sort-journal » print-journal

module+ test
  require rackunit
  define invalid-header "202101202210 KEP kathmandu room      racket             │ read a file line by line in racket"
  define valid-header "20210120_2210 KEP kathmandu room      racket             │ read a file line by line in racket"
  define valid-header-with-priority "20210120_2210 KEP kathmandu room      racket            +│ read a file line by line in racket"
  define valid-header-with-hashtag "20210120_2210 KEP kathmandu room      racket #jamaica    │ read a file line by line in racket"
  define valid-header-with-lf (valid-header » string-append "\n")
  define valid-header-with-modeline ("//vim: blah blah\n" » string-append valid-header)
  define two-valid-headers (valid-header » string-append "\n" valid-header)
  define valid-body "line 1\nline 2\nanything can go here"
  define valid-entry (valid-header » string-append "\n\n" valid-body "\n\n")
  define two-valid-entries (valid-entry » string-append valid-entry)

;;
;; parse-journal: parses all the entries in the input stream and return a list of entries
;; include? defines a filter function
;;
module+ test
  (open-input-string invalid-header) » parse-journal » check-equal? `()
  (open-input-string valid-header) » parse-journal » check-equal? `(($valid-header . ""))
  (open-input-string two-valid-headers) » parse-journal » check-equal? `(($valid-header . "") ($valid-header . ""))
  (open-input-string valid-entry) » parse-journal » check-equal? `(($valid-header . $valid-body))
  (open-input-string two-valid-entries) » parse-journal » check-equal? `(($valid-header . $valid-body) ($valid-header . $valid-body))
  (open-input-string two-valid-entries) » parse-journal (e : #f) » check-equal? `()

define (parse-journal [in (current-input-port)] [include? (e : #t)] [result `()])
  let ([entry (parse-entry in)])
    if (entry » eof-object?)
      result » reverse
      if (entry » include?)
        parse-journal in include? (cons entry result)
        parse-journal in include? result

;;
;; parse-entry: parse the next journal entry from the input stream
;; lines before the first journal entry are ignored
;;
module+ test
  (open-input-string invalid-header) » parse-entry » check-equal? eof 
  (open-input-string valid-header) » parse-entry » check-equal? `($valid-header . "")
  (open-input-string valid-header-with-lf) » parse-entry » check-equal? `($valid-header . "")
  (open-input-string two-valid-headers) » parse-entry » check-equal? `($valid-header . "")
  (open-input-string valid-header-with-modeline) » parse-entry » check-equal? `($valid-header . "")
  (open-input-string valid-entry) » parse-entry » check-equal? `($valid-header . $valid-body)

define (parse-entry [in (current-input-port)])
  let ([header (read-line in)])
    if (header » eof-object?)
      eof
      if (header » journal-header?)
        cons header (parse-body in)
        parse-entry in

;;
;; parse-body: reads and returns one journal entry body from the input stream
;; stopping at the next header line, or end of file
;;
module+ test
  (open-input-string valid-header) » parse-body » check-equal? ""
  (open-input-string "") » parse-body » check-equal? ""
  (open-input-string " ") » parse-body » check-equal? ""
  (open-input-string "line 1") » parse-body » check-equal? "line 1"
  (open-input-string "line 1\nline 2") » parse-body » check-equal? "line 1\nline 2"
  (open-input-string "  \n line 1\nline 2\n") » parse-body » check-equal? "line 1\nline 2"
  (open-input-string ("line 1\nline 2\n" » string-append valid-header)) » parse-body » check-equal? "line 1\nline 2"
  (open-input-string ("line 1\nline 2\n" » string-append valid-header "\nline 3")) » parse-body » check-equal? "line 1\nline 2"

define (parse-body [in (current-input-port)] [result ""])
  if ((peek-string 59 0 in) » journal-header?)
    result » string-trim
    let ([line (read-line in)])
      if (line » eof-object?)
        result » string-trim
        parse-body in (result » string-append line "\n")

;;
;; journal-header?: test if a string is a journal header
;;
module+ test
  eof » journal-header? » check-false
  "foo" » journal-header? » check-false
  invalid-header » journal-header? » check-false
  valid-header » journal-header? » check-true
  valid-header-with-priority » journal-header? » check-true
  valid-header-with-hashtag » journal-header? » check-true
  valid-header-with-lf » journal-header? » check-true

define (journal-header? line)
  if (line » eof-object?)
    #f
    line »» regexp-match? #px"^[[:digit:]X?_]{13} .{43}│"

;;
;; sort journal entries by date
;;
define (sort-journal entries)
  entries » sort (e1 e2 : e1 » car » string<? (e2 » car))

define (print-journal entries)
  entries »» for-each print-entry

define (print-entry entry)
  entry » car » displayln
  unless (entry » cdr » eq? "")
    (newline)
    (entry » cdr » displayln)
    (newline)

